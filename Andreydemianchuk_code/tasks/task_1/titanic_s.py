# -*- coding: utf-8 -*-
"""Titanic_simple.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1xML6OS-AeM6VQ1qkooNVCbykEKUXWAqV

**Importing all libraries**
"""

import pandas as pd
from sklearn.ensemble import RandomForestClassifier
from sklearn.linear_model import LogisticRegression
from lightgbm import LGBMClassifier
from sklearn.preprocessing import StandardScaler
from sklearn.ensemble import VotingClassifier

"""**Loading the data**"""

train_data = pd.read_csv("/content/sample_data/train.csv", index_col="PassengerId")
test_data = pd.read_csv("/content/sample_data/test.csv", index_col="PassengerId")

"""**Feature selection**"""

features = ["Pclass", "Sex", "SibSp", "Parch"]
X = pd.get_dummies(train_data[features])
X_test = pd.get_dummies(test_data[features])
y = train_data["Survived"]

"""**Data Normalization**"""

ss = StandardScaler()
X_scaled = ss.fit_transform(X)
X_test_scaled = ss.transform(X_test)
print(X_scaled)
print(X_test_scaled)

"""**Modeling**"""

rfc = RandomForestClassifier(n_estimators=100, max_depth=5, random_state=1)
rfc.fit(X_scaled, y)
lg = LogisticRegression(random_state=10, max_iter=1000, C=20, solver='lbfgs')
lg.fit(X_scaled, y)
lgb = LGBMClassifier()
lgb.fit(X_scaled, y)

"""**Ensembling**"""

ensemble_model = VotingClassifier(estimators=[
    ("logit", lg),
    ("rf", rfc),
    ("lgb", lgb),
], voting="hard")

ensemble_model.fit(X_scaled, y)
preds = ensemble_model.predict(X_test_scaled)

"""**Output**"""

output = pd.DataFrame({'PassengerId': test_data.index,
                       'Survived': preds})

output.to_csv('submission.csv', index=False)